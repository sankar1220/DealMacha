package com.dealmacha.domain;

// Generated Apr 28, 2016 4:56:47 PM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.*;

/**
 * Transaction generated by hbm2java
 */
@Entity
@Table(name = "transaction", catalog = "dealmacha_app")
public class Transaction extends AbstractDomain implements java.io.Serializable {

	private Users users;
	private String code;
	private Double amount;
	private String paymentType;
	private String transactionFor;
	private String transactionCode;
	private String transactionErrorCode;
	private String transactionMerchantErrorCode;
	private String transactionMerchantMsg;
	private Integer transactionCount;
	private Date createdDate;
	private String orderStatus;
	private String source;
	private String targetUrl;
	private Double cashbackAmount;
	private String refundStatus;
	private Merchant merchant;
	private Set<Payment> payments = new HashSet<Payment>(0);

	public Transaction() {
	}

	public Transaction(final String orderStatus, final String refundStatus, final String targetUrl, final String source,
			final Users users, final String code, final Double amount, final String paymentType,
			final String transactionFor, final String transactionErrorCode, final Double cashbackAmount,
			final String transactionMerchantErrorCode, final String transactionMerchantMsg, final Date createdDate,
			final Integer transactionCount, final Merchant merchant) {
		this.merchant = merchant;
		this.orderStatus = orderStatus;
		this.users = users;
		this.targetUrl = targetUrl;
		this.refundStatus = refundStatus;
		this.transactionCount = transactionCount;
		this.source = source;
		this.cashbackAmount = cashbackAmount;
		this.code = code;
		this.amount = amount;
		this.paymentType = paymentType;
		this.transactionFor = transactionFor;
		this.transactionErrorCode = transactionErrorCode;
		this.transactionMerchantErrorCode = transactionMerchantErrorCode;
		this.transactionMerchantMsg = transactionMerchantMsg;
		this.createdDate = createdDate;
	}

	public Transaction(final String orderStatus, final String refundStatus, final String targetUrl, final String source,
			final Users users, final String code, final Double amount, final String transactionCode,
			final String paymentType, final String transactionFor, final String transactionErrorCode,
			final String transactionMerchantErrorCode, final String transactionMerchantMsg, final Merchant merchant,
			final Integer transactionCount, final Double cashbackAmount, final Date createdDate,
			final Set<Payment> payments) {
		this.orderStatus = orderStatus;
		this.users = users;
		this.merchant = merchant;
		this.transactionCode = transactionCode;
		this.refundStatus = refundStatus;
		this.cashbackAmount = cashbackAmount;
		this.targetUrl = targetUrl;
		this.source = source;
		this.code = code;
		this.transactionCount = transactionCount;
		this.amount = amount;
		this.paymentType = paymentType;
		this.transactionFor = transactionFor;
		this.transactionErrorCode = transactionErrorCode;
		this.transactionMerchantErrorCode = transactionMerchantErrorCode;
		this.transactionMerchantMsg = transactionMerchantMsg;
		this.createdDate = createdDate;
		this.payments = payments;

	}

	@Column(name = "amount", nullable = false, precision = 7)
	public Double getAmount() {
		return amount;
	}

	@Column(name = "cashback_amount", nullable = false, precision = 7)
	public Double getCashbackAmount() {
		return cashbackAmount;
	}

	@Column(name = "code", nullable = false, length = 45)
	public String getCode() {
		return code;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", nullable = false, length = 19)
	public Date getCreatedDate() {
		return createdDate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "merchant_id", nullable = false)
	public Merchant getMerchant() {
		return merchant;
	}

	@Column(name = "order_status", nullable = false, length = 45)
	public String getOrderStatus() {
		return orderStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "transaction")
	public Set<Payment> getPayments() {
		return payments;
	}

	@Column(name = "payment_type", nullable = false, length = 45)
	public String getPaymentType() {
		return paymentType;
	}

	@Column(name = "refund_status", nullable = false, length = 45)
	public String getRefundStatus() {
		return refundStatus;
	}

	@Column(name = "source", nullable = false, length = 45)
	public String getSource() {
		return source;
	}

	@Column(name = "target_url", nullable = false, length = 100)
	public String getTargetUrl() {
		return targetUrl;
	}

	@Column(name = "transaction_count", nullable = false)
	public Integer getTransactionCount() {
		return transactionCount;
	}

	@Column(name = "transaction_error_code", nullable = false, length = 45)
	public String getTransactionErrorCode() {
		return transactionErrorCode;
	}

	@Column(name = "transaction_for", nullable = false, length = 45)
	public String getTransactionFor() {
		return transactionFor;
	}

	@Column(name = "transaction_merchant_error_code", nullable = false, length = 45)
	public String getTransactionMerchantErrorCode() {
		return transactionMerchantErrorCode;
	}

	@Column(name = "transaction_merchant_msg", nullable = false, length = 45)
	public String getTransactionMerchantMsg() {
		return transactionMerchantMsg;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "users_id", nullable = false)
	public Users getUsers() {
		return users;
	}

	public void setAmount(final Double amount) {
		this.amount = amount;
	}

	public void setCashbackAmount(final Double cashbackAmount) {
		this.cashbackAmount = cashbackAmount;
	}

	public void setCode(final String code) {
		this.code = code;
	}

	public void setCreatedDate(final Date createdDate) {
		this.createdDate = createdDate;
	}

	public void setMerchant(final Merchant merchant) {
		this.merchant = merchant;
	}

	public void setOrderStatus(final String orderStatus) {
		this.orderStatus = orderStatus;
	}

	public void setPayments(final Set<Payment> payments) {
		this.payments = payments;
	}

	public void setPaymentType(final String paymentType) {
		this.paymentType = paymentType;
	}

	public void setRefundStatus(final String refundStatus) {
		this.refundStatus = refundStatus;
	}

	public void setSource(final String source) {
		this.source = source;
	}

	public void setTargetUrl(final String targetUrl) {
		this.targetUrl = targetUrl;
	}

	public void setTransactionCount(final Integer transactionCount) {
		this.transactionCount = transactionCount;
	}

	public void setTransactionErrorCode(final String transactionErrorCode) {
		this.transactionErrorCode = transactionErrorCode;
	}

	public void setTransactionFor(final String transactionFor) {
		this.transactionFor = transactionFor;
	}

	public void setTransactionMerchantErrorCode(final String transactionMerchantErrorCode) {
		this.transactionMerchantErrorCode = transactionMerchantErrorCode;
	}

	public void setTransactionMerchantMsg(final String transactionMerchantMsg) {
		this.transactionMerchantMsg = transactionMerchantMsg;
	}

	public void setUsers(final Users users) {
		this.users = users;
	}

	@Column(name = "transaction_code")
	public String getTransactionCode() {
		return transactionCode;
	}

	public void setTransactionCode(String transactionCode) {
		this.transactionCode = transactionCode;
	}

}
